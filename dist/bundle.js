(()=>{"use strict";class t{constructor(){this.grid=this.create(),this.ships=[],this.gameOver=!1,this.missedShots=[]}add(t){this.ships.push(t);for(const e of t.coords)this.grid[e[0]][e[1]]="O"}receiveAttack(t){if("O"===this.grid[t[0]][t[1]]){this.grid[t[0]][t[1]]="X";for(const e of this.ships)for(const r of e.coords)r.every((function(e,r){return e===t[r]}))&&(e.hit(),this.checkGameOver())}else this.missedShots.push(t),this.grid[t[0]][t[1]]="-"}checkGameOver(){let t=0;for(const e of this.ships)e.hitCount===e.length&&(t+=1);t===this.ships.length?this.gameOver=!0:this.gameOver=!1}create(){const t=[];for(let e=0;e<10;e++){let e=[];for(let t=0;t<10;t++)e.push(".");t.push(e)}return t}isValidMove(t){return"X"!==this.grid[t[0]][t[1]]&&!this.missedShots.includes(t)&&"-"!==this.grid[t[0]][t[1]]}}class e{#t={carrier:5,battleship:4,destroyer:3,submarine:3,patrol:2};constructor(t,e,r){this.length=this.#t[t],this.hitCount=0,this.sunkStatus=!1,this.coords=[e],this.populateCoords(r)}hit(){this.hitCount+=1,this.hitCount===this.length&&(this.sunkStatus=!0)}isSunk(){return this.sunkStatus}populateCoords(t){if(this.length<2)return;const e=[[0,1],[1,0]][!0===t?0:1];let r=this.coords[0][0],s=this.coords[0][1];for(let t=0;t<this.length-1;t++){let t=r+e[0],o=s+e[1];this.coords.push([t,o]),r=t,s=o}}}class r{constructor(e,r){this.name=e,this.board=new t,this.index=r}generateRandomAttack(t){let e=Math.floor(10*Math.random()+0),r=Math.floor(10*Math.random()+0);for(;!t.board.isValidMove([e,r]);)e=Math.floor(10*Math.random()+0),r=Math.floor(10*Math.random()+0);return[e,r]}move(t,e){e.board.receiveAttack(t)}setShip(t,r,s){const o=new e(t,r,s);this.board.add(o)}}const s=(()=>{let t=new r("Player 1",0),e=new r("Player 2",1);const s=document.querySelectorAll(".gameboard-cell"),a=document.querySelectorAll(".opponent-gameboard-cell"),n=document.querySelector(".game-text"),i=document.querySelector(".start-btn"),c=(document.querySelector(".rotate-btn"),document.querySelector(".restart-btn"));document.querySelector(".ships-container");let d=!1,l=t;function h(){const r=[parseInt(this.getAttribute("data-x")),parseInt(this.getAttribute("data-y"))],s=l===t?e:t;s.board.isValidMove(r)&&(l.move(r,s),o.renderDOMGrid(s),u(l,s))}const u=(r,i)=>{!0===i.board.gameOver?(d=!1,n.textContent=`${r.name} wins the game!`,s.forEach((t=>{t.removeEventListener("click",h)})),a.forEach((t=>{t.removeEventListener("click",h)}))):(l=l===t?e:t,"Player 2"===i.name&&(()=>{const r=e.generateRandomAttack(t);e.move(r,t),o.renderDOMGrid(t),u(e,t)})())};return i.addEventListener("click",(t=>{t.preventDefault(),(()=>{d=!0,n.textContent="Game started! Sink all the opponent's ships.";const t={carrier:5,battleship:4,destroyer:3,submarine:3,patrol:2},r=["carrier","battleship","destroyer","submarine","patrol"],s=[!0,!1];let o=0;for(;o<r.length;){const a=s[parseInt(Math.floor(2*Math.random()+0))],n=parseInt(Math.floor(10*Math.random()+0)),i=parseInt(Math.floor(10*Math.random()+0));if(!0===a){if(i+t[r[o]]<9)continue;let s=!1;for(let a=0;a<t[r[o]];a++)e.board.grid[n][i+a]&&"O"!==e.board.grid[n][i+a]||(s=!0);if(s)continue}else{if(n+t[r[o]]>9)continue;let s=!1;for(let a=0;a<t[r[o]];a++)e.board.grid[n+a][i]&&"O"!==e.board.grid[n+a][i]||(s=!0);if(s)continue}e.setShip(r[o],[n,i],a),o++}a.forEach((t=>{t.addEventListener("click",h)}))})(),c.classList.toggle("hidden"),i.classList.toggle("hidden")})),c.addEventListener("click",(function(){location.reload()})),{getCurrPlayer:()=>l}})(),o=(()=>{let t=!0;const e=document.querySelector(".rotate-btn");let r;function o(){r=this}function a(t){t.preventDefault()}function n(t){t.preventDefault()}function i(){}function c(){}function d(){const o=r.classList[1],a={carrier:5,battleship:4,destroyer:3,submarine:3,patrol:2}[o],n=[parseInt(this.dataset.x),parseInt(this.dataset.y)];if(t){if(!(n[1]+(a-1)<=9))return;for(let t=0;t<a;t++)document.querySelector(`[data-coord='[${n[0]},${n[1]+t}]']`).classList.add("ship");r.remove()}else{if(!(n[0]+(a-1)<=9))return;for(let t=0;t<a;t++)document.querySelector(`[data-coord='[${n[0]+t},${n[1]}]']`).classList.add("ship");r.remove()}s.getCurrPlayer().setShip(o,n,t),l()&&(document.querySelector(".start-btn").classList.toggle("hidden"),e.classList.toggle("hidden"))}e.addEventListener("click",(e=>{e.preventDefault(),document.querySelectorAll(".ships-container .ship").forEach((t=>{const e=t.className.split(" ")[1];t.classList.toggle(`${e}-vertical`)})),t=!1===t})),document.querySelectorAll(".ship").forEach((t=>t.addEventListener("dragstart",o)));const l=()=>0===document.querySelectorAll(".ships-container .ship").length,h=document.querySelectorAll(".user-board .gameboard .gameboard-row .gameboard-cell");return h.forEach((t=>t.addEventListener("dragstart",o))),h.forEach((t=>t.addEventListener("dragover",a))),h.forEach((t=>t.addEventListener("dragenter",n))),h.forEach((t=>t.addEventListener("dragleave",i))),h.forEach((t=>t.addEventListener("drop",d))),h.forEach((t=>t.addEventListener("dragend",c))),{renderDOMGrid:t=>{const e=t.board.grid,r="Player 1"===t.name?0:1,s=t.board.missedShots;for(let t=0;t<10;t++)for(let s=0;s<10;s++){const o=document.querySelectorAll(`[data-coord='[${t},${s}]']`);"X"===e[t][s]&&o[r].classList.add("good-attack")}for(const t of s){const[e,s]=t;document.querySelectorAll(`[data-coord='[${e},${s}]']`)[r].classList.add("missed-attack")}},resetDOMGrid:()=>{h.forEach((t=>{t.classList.remove("ship"),t.classList.remove("missed-attack"),t.classList.remove("good-attack")}))}}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,